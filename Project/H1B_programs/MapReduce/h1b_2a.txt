package p2a;

import java.io.*;
import java.util.TreeMap;

import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.fs.*;
import org.apache.hadoop.mapreduce.lib.input.*;
import org.apache.hadoop.mapreduce.lib.output.*;
import org.apache.hadoop.util.*;

public class Partwise extends Configured implements Tool
{
   //Map class
	
	public static class MapClass extends Mapper<LongWritable,Text,Text,Text>	
	{
	public void map(LongWritable key,Text value,Context context)
	{
		
		try
		{
		String[] str = value.toString().split("\t");
		String str1 = str[4]; //job title column
		String str2 = str[7].trim(); //year column
		String str3 =str[8]; //worksite
		if (str1.contains("DATA ENGINEER"))
		{
			context.write(new Text(str3), new Text(str2));
		}
		}
		catch(Exception e)
		{
			System.out.println(e.getMessage());
		}
		
		}
	}
   
	public static class ReduceClass extends Reducer<Text,Text,NullWritable,Text>
	{
		TreeMap<Integer,Text>  tm=new TreeMap<Integer,Text>();
		
		public void reduce(Text key,Iterable<Text>values,Context context) throws IOException, InterruptedException
		{
			int count=0;
			String year="";

			for(Text val:values)
			{
				year=val.toString();
				count++;
			}
				
				
			
			
			String total=String.format("%d", count);			
			//String all_total = total11+total12+total13+total14+total15+total16;
			String mykey=key.toString();
			String myvalue = mykey+","+","+year+","+total;
			tm.put(new Integer(count),new Text(myvalue));
			
		}
		
		
		
		public void cleanup(Context context) throws IOException, InterruptedException
		{
			for(Text t:tm.descendingMap().values())
			{
				context.write(NullWritable.get(),t);
			}
		}
		
	}
	
   public static class MyPartitioner extends
   Partitioner < Text, Text >
   {
      @Override
      public int getPartition(Text key, Text value, int numReduceTasks)
      {
    	  int year=Integer.parseInt(value.toString());
    	  
  		if(year==2011)
  		{
  			return 0 % numReduceTasks;
  		}
  		else if(year==2012)
  		 {
  			return 1 % numReduceTasks;
  		 }
  	  else if(year==2013)
  		 {
  			return 2 % numReduceTasks;
  		 }
  	  else if(year==2014)
  		 {
  			return 3 % numReduceTasks;
  		 }
  	  else if(year==2015)
  		 {
  			return 4 % numReduceTasks;
  		 }
  	  else if(year==2016)
  			{
  			 return 5 % numReduceTasks;
  			}
  		else
  		{
    		return 6 % numReduceTasks;
        }
  	 }
   }
   
   @Override
   public int run(String[] arg) throws Exception
   {
      Configuration conf = getConf();
		
      Job job = new Job(conf, "Data engineer");
      job.setJarByClass(Partwise.class);
		
      FileInputFormat.setInputPaths(job, new Path(arg[0]));
      FileOutputFormat.setOutputPath(job,new Path(arg[1]));
		
      job.setMapperClass(MapClass.class);
		
      job.setMapOutputKeyClass(Text.class);
      job.setMapOutputValueClass(Text.class);
      
      //set partitioner statement
		
      job.setPartitionerClass(MyPartitioner.class);
      job.setReducerClass(ReduceClass.class);
      job.setNumReduceTasks(7);
      job.setInputFormatClass(TextInputFormat.class);
		
      job.setOutputFormatClass(TextOutputFormat.class);
      job.setOutputKeyClass(NullWritable.class);
      job.setOutputValueClass(Text.class);
		
      System.exit(job.waitForCompletion(true)? 0 : 1);
      return 0;
   }
   
   public static void main(String ar[]) throws Exception
   {
      int res = ToolRunner.run(new Configuration(), new Partwise(),ar);
      System.exit(0);
   }
}